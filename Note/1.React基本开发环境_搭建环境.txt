L 搭建工程化React开发环境
一.	概念:
1.	非工程化
(1)	直接上手做
(2)	检查是否满足需求
(3)	修修补补直到满足需求
总结:	难以重复, 缺乏标准流程,维护性差

2.	工程化
总结:	过程可重复自动化,适合大规模多人协作,可维护性好
(1)	设计图纸 - npm init 生成或拷贝线程
(2)	准备材料 - npm install 安装依赖包
(3)	制作零件 - 开发个代码模块
(4)	组装零件 - 配置并运行打包工具,编译工具等


二.	对应指令
1.	设计图纸
(1)	自己设计项目图纸 - npm init 
(2)	套用现成的设计图纸 - 复制 package.json

2.	如何安装
(1)	自己设计项目图纸 
a.	npm install --save xxx: 安装并且写入运行依赖 (运行时和发布到生产环境时的依赖)
写在 "dependencies":{....}

b.	npm install --save-dev xxx: 安装并且写入开发依赖 (实际开发时用到的依赖和运行依赖没有关联)
写在 "devDependencies":{....}

c.	npm install -g xxx:	安装到系统里,而不是项目下. 一般用于安装工具(比如, webpack) 

(2)	套用现成的设计图纸 
npm install

3.	React 工程化开发环境构成
(1)	Webpack (包括各种loader和插件)
(2)	babel (包括各种preset) -> 保证浏览器的兼容性(jsx也是需要浏览器去兼容的)
(3)	less/sass 
(4)	react
(5)	react-dom

4.	举例 devDependencies 和 dependencies (运行)
dependencies: less/sass, react, react-dom
devDependencies: babel, webpack, 
注:	babel-loader其实是 webpack的 loader 用于 babel 

5.	组装零件
(1)	npm install (生成 node_module 文件夹)
(2)	.babelrc 配置 babel文件
{
	"presets":["es2015", "react"]
}

(3)	webpack.config.js
a.	entry (项目入口)
b.	output (指明打包以后会生成什么文件)
c.	module:
		->rules: 加载的规则, 用什么去加载它, 举例如下:
		rules:[
			{
				test: /\.jsx?$/, //加载文件的规则
				exclude: /node_modules/, //不执行什么文件
				loader:	'babel-loader' //用什么去加载它
			},
			{
				test: /\.less$/,
				loader: 'style-loader!css-loader!less-loader'
				//注: 这个意思就是 先用less-loader 加载, 然后传给 css-loader, 再传给style-loader
			}
		]
		


三.	实际操作
a.	npm init 
b.	填写项目名(可以填写)和作者名等等, 回车用默认和跳过就好了

