L 状态提升
一. 几个传递数据情景和方法
1.  父组件 -> 子组件: 父组件给 子组件的 props 赋值

2.  子组件 -> 父组件: 将props设置为回调函数, 然后父组件将这个函数传给子组件
解析：  父组件向子组件传递函数, 子组件调用函数并且给这个函数传递data, 进而做到子组件给父组件传递数据 

3.  兄弟组件之间传递数据 (都在同一个父组件之下): 通过父组件连接兄弟组件
解析:   将子组件的数据传给父组件, 然后再由父组件传给另一个子组件

4.  任一组件传递数据: 通过全局变量连接各个组件, 方法比如
(1) 发布-订阅者模式 --- 常常用于事件监听的系统
(2) window 下的全局变量 --- 读取一些配置
(3) Context --- React的上下文, 全局的配置 (比如 主题色, )
(4) ....


二. 代码实例
1.  (在4.1里)
2.   子组件 -> 父组件: 将props设置为回调函数, 然后父组件将这个函数传给子组件
(1) 子组件
class Child extends React.Component{
    constructor (props){
        super(props);
    }
    componentDidMount(){ 
        this.props.report('test'); //当挂载后, 就调用 父类的方法
    }
    render(){
        return <h1> Hello Child </h1>
    }
}

(2) 父组件
class Parent extends React.Component{
    constructor (props){
        super(props);
    }
    showLog(data){
        console.log(data);
    }
    render(){
        return <Child report={this.showLog} /> 
    }
}

3.  兄弟组件之间传递数据 (都在同一个父组件之下): 通过父组件连接兄弟组件
(1) 子组件
class Sibling extends React.Component{
    constructor (props){
        super(props);
    }
    
    render(){
        return <button onClick={this.props.onClick}> {this.props.count} </button>
    }
}
Sibling.propType ={
    count: propTypes.number,
    onClick: propTypes.func
}

(2) 父组件
class Parent extends React.Component{
    constructor (props){
        super(props);
        this.state={
            countA:0, 
            countB:0
        }
    
    }
    onClick(index){
        if(index===1){
            this.setState((prevState)=>{
                countB: prevState.countB+1
            })
        }else if(index===2){
            this.setState((prevState)=>{
                countA: prevState.countA+1
            })
        }
    }
    render(){
        return 
        <div>
            <Sibling count={this.state.countA} onClick={this.onClick.bind(this,1)} /> 
            <Sibling count={this.state.countB} onClick={this.onClick.bind(this,2)} /> 
        </div>
    }
}

注: 子组件所使用的数据, 为了让子组件之间能够相互的交互。我们把有些数据从子组件放到父组件中来维护。然后通过props 来更新子组件。 
    所以这样 数据被"提升"到父组件当中， 这样的过程叫做 状态提升