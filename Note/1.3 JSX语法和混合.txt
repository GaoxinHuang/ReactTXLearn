L JSX 语法
一.	JSX 到 HTML 的三步走
1.	JSX提供类似于HTML标签的写法, 方便开发者编写
2.	Babel将JSX语法编译为React的API
3.	React将 ReactAPI中生成的组件渲染为HTML元素

二.	编译例:
1.	JSX
render(){
	return <div><h1 style={{color:'red'}}>Hello</h1></div>
}

2.	babel编译成 React的API
render(){
	return React.createElement('div',{},
		[React.createElement('h1',{style:{color:'red'}}, 'Hello')]
	);
}
注:	对应如下
(1)	'div': html 标签, 或 React component 或 React.Fragment
(2)	{style:{color:'red'}}: 对应了html的点的属性
(3)	'Hello': 子元素 或 字符串

三.	JSX语法原则
1.	最外层只能有一个标签包裹
注:	React.Fragment: 在react16.2提供一个简便的版本, 例子如下
<><div></div> <p></p></>

2.	标签一定要闭合
3.	没有子节点(子元素)的标签可以写成自闭和的单标签 (<img /> 或 <App />)
4.	属性使用是驼峰命名法 - className, 
比如 <button onClick={...} > Click Me </button>
注:	因为onClick会react编译的, 所以不能用原来的 onclick
-----------------------------------------------------------

L 混合Javascript 和 JSX
一.	JSX 中使用 JavasScript
1.	React.createElement(type, [props], [..children])
(1)	参数本质都是 JS 语言的数据类型, 当然返回值本身也是 JavaScript object(对象)
(2)	参数:	type是必填, props和 children是可选
(3)	React.createElement 整个, props, children都可以和 javascript 语句混合使用. (除了type), 例如:
a.	React.createElement
render(){
	const {useName} = this.state;
	return useName? <h1>Hello, {userName} </h1>:<h1>Hello react</h1>
}
注:	这里'<h1>Hello react</h1>' 就是整个React.createElement 都是 javascript

b.	props 举例:
render (){
	return <h1 style = {{fontSize:'14px'}}>Hello</h1>
}
注:	最外层的大括号就是 JSX, 里面一层大括号表示此处是一块JS 代码
	给style 赋值一个 object {fontSize:'14px'}
	
c.	Children 
render(){
	const slogan = <h1> {name} </h1> //注: 这里面name就是一块JS 代码
	return <div>{<span>Hello</span>, [slgan]} </div>
	//注: 输出: Hello, XX
	//	可以用变量作为参数传入, 还可以让JSX 标签与 JS 混合
}

二.	条件渲染
1.	满足某个条件才渲染 -> 使用 &&
https://mariusschulz.com/blog/the-and-and-or-operators-in-javascript

例如:	
<div>
{this.props.name || 'user'} //这里 ||, 就是如果this.props.name为
{!this.props.name && <p>You need log in</p>} 
</div>
注:	如果看不懂, 可以详见 重点.txt里的 || 和 && 的应用

2.	根据某个条件是否成立, 渲染两种不同的元素 -> 使用 三元运算符,
例:	{ this.props.name? <p>Hello, {this.props.name} </p> : <p>please log in</p> }

3.	更加复杂的条件	-> 声明变量, 使用 if-else 判断并赋值
例:
render(){
	let dom =(<div></div>);
	if(this.props.type === 'admin'){	dom = <p>Hello, Admin </p>	}
	else if (this.props.type === 'vip'){	dom = <p>Hello, VIP </p> }
	else {dom = <p>please log in </p>}
	return dom;
}

三.	循环渲染
1.	渲染一系列结构相同的元素, 比如用户列表
step1.	构建数组型变量
step2.	Array.map

2.	实例:
render (){
	return <ul>
	{this.props.list.map((item, i) => (<li key={i}>item</li>))}
}
注:	1.	react中用数组的子元素来渲染DOM, 必须一个 独一无二 'key' 来定义每个子类. 
		因为react要根据key来判断这个dom是否发生了变化而重新渲染. 
		
	2.	教程里,实际项目不推荐用 i 来作为这个 key, 因为这个是跟数据有关, 而不是跟具体的element有关联,
		因为 正如上面所说 react会观察key的变化而渲染. 所以 推荐使用Id