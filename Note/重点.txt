一.	|| 和 && 应用
1.	bool 值
&&: 只要有一个 false 就是 false
(1)	true && true -> true
(2)	true && false -> false
(3)	false && true -> false
(4)	false && false -> false
注: 逻辑顺序, 先看第一个是不是false.如果是false, 就不往下看了. 直接return 那个false

||:	只要有一个 true 就是 true
(1)	true || true -> true
(2)	true || false -> true
(3)	false || true -> true
(4)	false || false -> false
注: 逻辑顺序, 先看第一个是不是true.如果是true, 就不往下看了. 直接return 那个true

2.	演变成其他值
&&: 先看第一个是不是能强制转化成false, 如果能, 就return这个值. 
	不然就return 后一个值, 
"foo" && "bar"; -> "bar"
"bar" && "foo"; -> "foo"
"foo" && "";    -> ""
""    && "foo"; -> ""
	
||:	先看第一个是不是能强制转化成true, 如果能, 就return这个值. 
	不然就return 后一个值
"foo" || "bar"; -> "foo"
"bar" || "foo"; -> "bar"
"foo" || "";    -> "foo"
""    || "foo"; -> "foo"

二.	React中 state的提升
1.	状态提升：	在 React 中，状态分享是通过将 state 数据提升至离需要这些数据的组件最近的父组件来完成的。
2.	在 React 应用中，遵循单一数据源原则。
	简单来说，如果两个或者多个组件依赖于相同的数据，那么这些数据应当放到离需要它们的最近的父组件中，在应用中保持自上而下的数据流。
	这样的做法可以帮助我们更快的定位 bug，因为组件的状态只有组件自身可以操作，把可能产生 bug 的范围大大缩减了。