L 容器组件(ContainerComponent) 和 傻瓜组件 (DumbComponent)
一. 概念
1.  组件做了什么?
(1) 和Store保持同步: 监听Store的变化, 从Store 中获取数据
(2) 渲染界面: 根据props 和 state 来渲染界面

2.  容器组件 和 傻瓜组件
(1) 容器组件 和 傻瓜组件 的定义
    a.  和Store保持同步 - 容器组件 / 聪明组件 ContainerComponent
    b.  渲染界面和反馈输入信息到容器组件 - 展示组件 / 傻瓜组件  DumbComponent

(2)  Store -> ContainerComponent ->通过 props -> DumbComponent -> UI
注: 这样就把展示逻辑和数据逻辑区分开


L 处理更复杂的数据
一. 之前的Redux应用的存在问题
1.  容器组件和傻瓜组件强耦合, 有些多余的代码
2.  Redux应用只有一个Store, 处处都要 import

二. 处理问题
1.  通过props传递什么?
(1) Store 中的state, 容器向核心组件(傻瓜组件)传递数据
(2) Store 中的dispatch, 核心组件向容器发起行为

三. 原代码 
1.  高阶组件 connect
function connect(mapStateToProps,mapDispathToProps){
    return function connectHoc(Component){
        return class Connect extends React.Component{
            constructor(props){
                super(props);
                this.state=Object.assign({},
                mapStateToProps(store.getState()),
                mapDispathToProps(store.dispatch)
                );
                this.onStoreChange = this.onStoreChange.bind(this);
            }
            componentDidMount(){
                store.subscribe(this.onStoreChange);
            }
            componentWillUnmount(){
               store.unsubscribe(this.onStoreChange);
            }
            onStoreChange(){
                const state = store.getState();
                this.getState(mapStateToProps(state));
            }
            render(){
                return <Component {...this.props} {...this.state} />
            }
        }
    }
}

注: (1) mapStateToProps 和 mapDispathToProps 是两个方法
    (2) mapStateToProps: 需要哪些数据映射到内部的傻瓜组件里的props里去
    (3) mapDispathToProps: 把 Dispatch 的能力给到 傻瓜组件
    (4) store.subscribe(this.onStoreChange) 和 store.unsubscribe(this.onStoreChange) 来订阅观察store的变化. 

2.  mapStateToProps
function mapStateToProps(state){
    const { todos } = state;
    return{
        todos: todos.list
    }
}
注: mapStateToProps(store.getState()): 从store 得到 state, 传过去

3.  mapDispathToProps
    function mapDispathToProps(dispatch){
    return {
        deleteTodo: id => dispatch(TodoActions.deleteTodo(id))
    }
}
注: mapDispathToProps(store.dispatch): 从store 得到 dispatch, 然后封装后传过去

4.  调用 export default connect(mapStateToProps, mapDispathToProps)(TodoList); 

四. 如何设置全局可访问的Store? (Redux-react 其实已经做好了, 不需要去考虑)
1.  解决方案: 利用 Context 
2.  在 React在16.3版本之后提供了新的ContextAPI, 所以需要使用旧的API 

3.  实际代码(在16.3之前, 不实用在项目里)
(1) Provider
class Provider extends React.Component{
    getChildContext(){
        return {
            store: this.props.store
        }
    }
    render(){
        return this.props.children;
    }
}
Provider.childContextTypes={
    store: PropTypes.object
}

ReactDOM.render(
    <Provider store ={Store} >
        <App />
    </Provider>
    document.querySelector('#app')
);

(2) connect 修改去获取 context
constructor(props, context){  //从provder里传入context
    super(props, context);
    this.state=Object.assign({},
    mapStateToProps(context.store.getState()),  //是由 context里store
    mapDispathToProps(context.store.dispatch));  //是由 context里store
    this.onStoreChange = this.onStoreChange.bind(this);
}
componentDidMount(){
    this.context.store.subscribe(this.onStoreChange);  //是由 context里store
}
componentWillUnmount(){
    this.context.store.unsubscribe(this.onStoreChange);  //是由 context里store
}
onStoreChange(){
    const state = this.context.store.getState(); //是由 context里store
    this.getState(mapStateToProps(state));
}
render(){
    return <Component {...this.props} {...this.state} />
    }
}


L 使用 react-redux
一. 概念
1.  react-redux介绍 (还是上个L里的,只是写到这里了): 
(1) 实际图: Store -> Provider [App [connect(mapStateToProps,mapDispathToProps)(Component),connect(mapStateToProps,mapDispathToProps)(Component)]]
(2) 提供了: Provider 和 connect
(3) connect 使用基本不变, Provider 变化如下
a.  store.js
import{ createStore} from 'redux';
import Reducer from './reducers';
export default createStore(Reducer);

b.  index.js
import { Provider } from 'react-redux';
import Store from './store';
import App from 'Components/app';

ReactDOM.render(
    <Provider store ={store}>
        <App />
    </Provider>
)

二. 文件结构
1.  最外层
store.js
index.jsx

2.  components: dumb component (傻瓜组件) (注: app也要这个傻瓜组件里)
3.  containers： 容器组件
4.  reducers: reducers 文件

三. 实际代码
1.  app.jsx (在 components 下, 包含了其他containers 组件。 具体代码就不写了)

2.  index.jsx (最外层)
import { Provider } from 'react-redux';
import Store from './store';
import App from 'Components/app';

ReactDOM.render(
    <Provider store ={store}>
        <App />
    </Provider>
)

3.  store.js (最外层)
import{ createStore} from 'redux';
import Reducer from './reducers';
export default createStore(Reducer, window._REDUX_DEVTOOLS_EXTENSION_ && window._REDUX_DEVTOOLS_EXTENSION_());
//注: 后面那window._REDUX_DEVTOOLS_EXTENSION_() 都是 Redux 的 Debug 工具

4.  filterTodoList.js (containers底下)
//@param state 就是 redux中的state, @return 返回一个映射对象
function mapStateToProps(state){
//只从state中取一些需要的数据即可
    const{
        todo,
        bisibility
    } = state;
    return {
        todos:filterTodos(todos.list, visibility.filter)
    }
}

//@param dispatch 就是 redux中的dispatch, @return 返回一个映射对象
function mapDispathToProps(dispatch){ 
    //传递了删除和切换的能力.
    //注: 只传递必须的功能
    return {
        toggleTodo: id => dispatch(TodoActions.toggleTodo(id)),
        deleteTodo: id => dispatch(TodoActions.deleteTodo(id))
    }
}
export defualt connect(mapStateToProps, mapDispathToProps)(TodoList);

5.  todoList-> index.jsx (可以写成一个无状态组件)
class TodoList extends React.Component{
    render(){
        const {todos, toggleTodo, deleteTodo } = this.props; 
        return <div>
            <ul>{ todos.map((item)=>(
                <TodoItem key={item.id} text={item.text} .... onToggle={()=>toggleTodo(item.id)} onDelete={()=>deleteTodo(item.id)}  
            ))}</ul>
        </div>
    }
    注: (1) this.props 就可以直接获取到 filterTodoList传给 store, 然后转给 TodoList的
        (2) 这里又导入 TodoItem, 接着往下看
}

TodoList.propTypes={ //注： 为了规范, 傻瓜组件需要写这个
    todos:....,
    toggleTodo: PropTypes.func.isRequired,
    deleteTodo: PropTypes.func.isRequired
};       

6.  todoItem-> index.jsx
.....
import className from 'classnames'; //好像是什么包
import './index.less'; 
class TodoItem extends React.Component{
    render(){
        const {text, done, onToggle, onDelete } = this.props;
        const itemClass = className{{'todo-item':true, 'active':done }};
        return <li onClick={onToggle} >
            <span>{text} </span>
            <span onClick={onDelete}> deleted </span>
        </li>
    }
}

四. 介绍了 redux的 debug工具。 还是Chrome 需要安装redux 扩展 
1.  可以利用skip 和jump 去查看不同时期的状态

L Redux DevTools (资料)
一. 安装 Redux DevTools 浏览器插件
打开谷歌的网上应用店或者火狐的附件组件商店），搜索 redux devtools，直接安装即可。

二. 代码配置
1.  不含中间件
const store = createStore(
   reducer, 
   /* preloadedState, */
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
 );

2. Store 包含中间件，配置如下：
import { createStore, applyMiddleware, compose } from 'redux';
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
    const store = createStore(reducer, /* preloadedState, */ composeEnhancers(
    applyMiddleware(...middleware)
  ));

注: window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ 函数同样来源于 Redux DevTools 插件，当插件未安装时，直接使用该方法会导致报错，
    所有这里加多了一层保护，当 window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ 值为 false 时，使用 Redux 提供的 compose 方法作为替代。

三. 使用 redux-devtools-extension 包进行配置的代码
1.  npm install --save-dev redux-devtools-extension

2.1 不含中间件
import { createStore } from 'redux';
import { devToolsEnhancer } from 'redux-devtools-extension';
const store = createStore(
    reducer, 
    /* preloadedState, */
    devToolsEnhancer()
);

2.2  Store 包含中间件，配置如下
import { createStore, applyMiddleware } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';
const store = createStore(
    reducer, 
    /* preloadedState, */
    composeWithDevTools(
      applyMiddleware(...middleware)
    )
);