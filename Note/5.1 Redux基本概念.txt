L Redux 简介
一.  什么是 Redux
(1) Flux 架构的一个实现
(2) 一个可预测的状态容器
(3) Flux 架构与函数式编程思想的结合

二.  Redux 数据流
View -> ActionCreator (Action的生成器) -> Dispatcher -> Reducers -> Reducers (获取Store里之前的state， 并且处理逻辑) -> 返回新的State -> View

三.  数据流的特点
(1) Store 是唯一一个, 所以 Dispatcher 和 Store 都是唯一的
(2) 因为 Dispatcher 和 Store 都是唯一的, 所以他们两就被绑定一起。
(3) Reducers 也被单独罗列出来，用来处理不同的逻辑

四.  Redux 的基本原则
(1) 唯一数据源 --- 只有一个Store
(2) 保持状态只读 --- 所以只能返回一个新的state, 而不能改变旧的state
(3) 数据改变只能通过纯函数完成 --- Reducer 方法必须是 纯函数。接受两个参数 action 和 state

五.  什么时候使用 Redux --- Redux 使数据流变得抽象。对于简单的数据流是不需要的, 但是能帮助复杂的数据流变得好管理 
(1) 存在本地存储或从服务器带来的初始数据/数据 --- 数据来源来自不同地方
(2) 需要记录用户操作，实现撤销功能或在不同状态间跳转 --- 因为Redux会记录所有已经发生的操作
(3) 组件之间状态相互有依赖严重， 组件数据源复杂 --- 


L 纯函数
一. 概念
1.  纯函数的定义
(1) 给定相同的输入, 总能获得相同的输出 --- 就是这个函数的输出的结果要和它的入参参数有关联。所以我们输出的结果要和函数的入参要明确的而且一样的(个人理解是从格式上)
(2) 函数过程中不会产生副作用 --- 对函数以外或者传入参数不会产生影响
(3) 不依赖外部状态 --- 内部的函数处理只与传入参数有关，与其他无关。比如不受全局变量的影响等

二.  非纯函数的例子
function getNumber(){
    return Math.random(); //返回值是不确定的
}

function getElement(array){
    return array.pop(); //pop()会删除array当中的最后一位, 并且返回出来。违反对外界产生影响了
}

function getTime(){
    return new Date().toLocaleTimeString(); // 依赖了外部本地时间变量, 而且每次的输出都是不一样的
}

L Redux 与 函数式编程 (资料, 未看完)
一. 什么是函数式编程？
函数式编程（Functional programming）是指一种编程典范，它避免使用程序状态和易变对象，倡导利用若干简单的执行单元让计算结果不断渐进，
                                逐层推导复杂的运算，而不是设计一个复杂的执行过程。

二. 函数式编程的特点
1.  函数是第一等公民
在 JavaScript 中，函数本就是第一等公民。JavaScript 中的函数可以作为参数传递，可以赋值给变量，可以作为函数返回值，还可以把它们存储到数组中，它与其他数据类型一样，处于平等地位。

2.  只使用表达式，不使用语句
函数式编程的每一步都是一个有返回值的表达式（expression），而不是多个语句（statement）。它强调将复杂的计算过程拆分成多个可复用的函数。

3.  没有副作用的纯函数
函数式编程要求我们编写的每个函数都是独立而无副作用的，不会修改系统中的状态值，且只会返回一个新的值。同时的，函数在相同的输入值时，需产生相同的输出。