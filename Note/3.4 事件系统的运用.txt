L 我想实现一个登录框 (什么时候使用受控组件, 什么时候使用非受控组件)
1.  一般情况下使用非受控组件就够用了, 但是并不鼓励。 受控组件使数据始终和 UI 保持同步，符合 React 中状态决定视图的思想
2.  如果需要使用到 状态同步或者状态更新, 组件的数据对UI影响等 时, 需要使用受控组件 

L 受控组件
一.  概念
1.  定义：受控组件的值是由 React来控制的, 表单元素都有React控制的就是 受控组件 
2.  举例：用户输入 或 (表单变化) => newState (我们会设置一个 newState去维护和控制它) 
3.  受控组件流程图:
用户输入, 表单值发生变化 -> 触发 onchange 函数 -> 调用 setState -> 触发 render (重新渲染) -> 表单数据更新成功
4.  使用场景:  提倡使用受控组件，受控组件意味着我们的数据始终和 UI 保持同步，符合 React 中状态决定视图的思想，也有利于提高项目的可维护性。

4.  特点
(1) 组件的 value 是由 this.state 所管理
(2) 组件的 onChange 也是由react来监管 来更新 state 
注: 如果只有(1), 没有(2)。React 就会报错，说 value会只是一个只读值，需要设置 onChange来控制。
    需要通过设置成只读或设置 onChange来取消报错

二. 代码操作
export defalut class Form extends React.Component{
    constructor(props)={
        super(props);
        this.state={
            text: ''
        }
    }
    handleChange(e){
        this.setState({
            value:e.target.value
        })
    }
    render(){
        return <input value={this.state.value} onChange = {this.handleChange} />
    }

}
注: 这个就是获取 用户输入的值, 更新到这个value

L 常用表单元素(受控组件写法)
一. textarea
HTML 写法:
<textarea> some text</textarea>

React 写法: 
<textarea value={this.state.value} onChange={this.handleChange} />
注: react里textarea可以直接闭合

二. select
HTML 写法:
<select> 
    <option value ="cat" selected>Cat</option>
</select>

React 写法: 
<select value={this.state.value} onChange={this.handleChange}> 
    <option value ="cat" selected>Cat</option>
</select>
注: select的value={this.state.value}, 是根据value的值判断选中项

三. 一个 hanlder函数同时处理多个组件
1.  解决方案   
(1) 为每个元素添加一个name属性作为其唯一标识
(2) onChange 事件函数根据event.target.name的值 做不同的处理

2.  实际代码操作
export defalut class Form extends React.Component{
    constructor(props)={
        super(props);
        this.state={
            name: '',
            gender:'M',
            likeGame:false,
            likeMusic:false
        }
    }
    handleChange(e){
        cost name = e.target.name;
        let value = e.target.value;
        const type = e.target.type;
        if(type==='checkbox'){
           value = e.target.checked;
        }
        this.setState({
                [name]: value
        })
    }
    render(){
        return <div>
        <input type="text" name="name" value={this.state.name}  onChange={this.handleChange}  />
        <div>
            <label>M</label> <input type="radio" value="M" name="gender" checked={this.state.gender==='M'}  onChange={this.handleChange}  />
            <label>F</label> <input type="radio" value="F" name="gender" checked={this.state.gender==='F'}  onChange={this.handleChange}  />
        </div>
        <div>
            <label>game</label> <input type="checkbox" name="likeGame" checked={this.state.likeGame}  onChange={this.handleChange} />
            <label>music</label> <input type="checkbox" name="likeMusic" checked={this.state.likeMusic}  onChange={this.handleChange} />
        </div>
        </div>
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------
L 非受控组件
一. 概念
1.  定义：React 就不用去维护表单里的数据了   
2.  举例：React表单元素 + Ref = 非受控组件
3.  非受控组件流程图:
用户输入, 表单值发生变化 -> 通过Ref访问表单节点, 获取最新表单数据 -> 表单数据更新成功 

二. 代码操作
export defalut class Form extends React.Component{
    constructor(props)={
        super(props);
        this.state={
        }
        this.name = null;
    }
    handleSubmit(){
        alert(this.name.value);
    }

    render(){
        return  <div>   
        <input type="text" ref={name=>{this.name=name;} />
        <button onClick ={this.handleSubmit.bind(this)}>Submit</button>  </div>
    }
}

三. 非受控组件的默认值
1.  解决方案: defalutValue / defalutChecked
<input type="text" ref={name=>{this.name=name;} defalutValue={this.state.msg} />
<input type="checkbox" ref={name=>{this.name=name;} defalutChecked={this.state.checked} />

2.  为什么不能使用value 绑定默认值?
React中， 表单元素上的value属性将会覆盖DOM中的值。value属性需要搭配onChange属性一起使用
否则会导致用户的输入无法更新到表单。


